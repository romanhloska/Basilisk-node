(function() {var implementors = {};
implementors["basilisk_runtime"] = [{"text":"impl Convert&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;MultiLocation&gt;&gt; for <a class=\"struct\" href=\"basilisk_runtime/xcm/struct.CurrencyIdConvert.html\" title=\"struct basilisk_runtime::xcm::CurrencyIdConvert\">CurrencyIdConvert</a>","synthetic":false,"types":["basilisk_runtime::xcm::CurrencyIdConvert"]},{"text":"impl Convert&lt;MultiLocation, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"basilisk_runtime/xcm/struct.CurrencyIdConvert.html\" title=\"struct basilisk_runtime::xcm::CurrencyIdConvert\">CurrencyIdConvert</a>","synthetic":false,"types":["basilisk_runtime::xcm::CurrencyIdConvert"]},{"text":"impl Convert&lt;MultiAsset, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"basilisk_runtime/xcm/struct.CurrencyIdConvert.html\" title=\"struct basilisk_runtime::xcm::CurrencyIdConvert\">CurrencyIdConvert</a>","synthetic":false,"types":["basilisk_runtime::xcm::CurrencyIdConvert"]},{"text":"impl Convert&lt;&lt;&lt;MultiSignature as Verify&gt;::Signer as IdentifyAccount&gt;::AccountId, MultiLocation&gt; for <a class=\"struct\" href=\"basilisk_runtime/xcm/struct.AccountIdToMultiLocation.html\" title=\"struct basilisk_runtime::xcm::AccountIdToMultiLocation\">AccountIdToMultiLocation</a>","synthetic":false,"types":["basilisk_runtime::xcm::AccountIdToMultiLocation"]}];
implementors["testing_basilisk_runtime"] = [{"text":"impl Convert&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;MultiLocation&gt;&gt; for <a class=\"struct\" href=\"testing_basilisk_runtime/xcm/struct.CurrencyIdConvert.html\" title=\"struct testing_basilisk_runtime::xcm::CurrencyIdConvert\">CurrencyIdConvert</a>","synthetic":false,"types":["testing_basilisk_runtime::xcm::CurrencyIdConvert"]},{"text":"impl Convert&lt;MultiLocation, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"testing_basilisk_runtime/xcm/struct.CurrencyIdConvert.html\" title=\"struct testing_basilisk_runtime::xcm::CurrencyIdConvert\">CurrencyIdConvert</a>","synthetic":false,"types":["testing_basilisk_runtime::xcm::CurrencyIdConvert"]},{"text":"impl Convert&lt;MultiAsset, <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u32.html\">u32</a>&gt;&gt; for <a class=\"struct\" href=\"testing_basilisk_runtime/xcm/struct.CurrencyIdConvert.html\" title=\"struct testing_basilisk_runtime::xcm::CurrencyIdConvert\">CurrencyIdConvert</a>","synthetic":false,"types":["testing_basilisk_runtime::xcm::CurrencyIdConvert"]},{"text":"impl Convert&lt;&lt;&lt;MultiSignature as Verify&gt;::Signer as IdentifyAccount&gt;::AccountId, MultiLocation&gt; for <a class=\"struct\" href=\"testing_basilisk_runtime/xcm/struct.AccountIdToMultiLocation.html\" title=\"struct testing_basilisk_runtime::xcm::AccountIdToMultiLocation\">AccountIdToMultiLocation</a>","synthetic":false,"types":["testing_basilisk_runtime::xcm::AccountIdToMultiLocation"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()