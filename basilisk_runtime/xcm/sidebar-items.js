initSidebarItems({"struct":[["AccountIdToMultiLocation",""],["Ancestry",""],["BaseXcmWeight","The amount of weight an XCM operation takes. This is a safe overestimate."],["CurrencyIdConvert",""],["IsNativeConcrete","A `MatchesFungible` implementation. It matches concrete fungible assets whose `id` could be converted into `CurrencyId`."],["MaxAssetsForTransfer",""],["MaxInstructions",""],["MultiCurrencyAdapter","The `TransactAsset` implementation, to handle `MultiAsset` deposit/withdraw. Note that teleport related functions are unimplemented."],["MultiNativeAsset","A `FilterAssetLocation` implementation. Filters multi native assets whose reserve is same with `origin`."],["RelayChainOrigin",""],["RelayNetwork",""],["SelfLocation",""],["TradePassthrough",""],["XcmConfig",""]],"type":[["Barrier",""],["LocalAssetTransactor",""],["LocalOriginToLocation",""],["LocationToAccountId","Type for specifying how a `MultiLocation` can be converted into an `AccountId`. This is used when determining ownership of accounts for asset transacting and when attempting to use XCM `Transact` in order to determine the dispatch Origin."],["XcmOriginToCallOrigin","This is the type we use to convert an (incoming) XCM origin into a local `Origin` instance, ready for dispatching a transaction with Xcmâ€™s `Transact`. There is an `OriginKind` which can biases the kind of local `Origin` it will become."],["XcmRouter","The means for routing XCM messages which are not for local execution into the right message queues."]]});